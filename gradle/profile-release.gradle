/*
 * Copyright 2021 Karlsruhe Institute of Technology.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'net.researchgate.release'
apply plugin: 'maven-publish'
apply plugin: 'signing'
   
//for plugin net.researchgate.release 
//see https://github.com/researchgate/gradle-release
release {
    //define template for tagging, e.g. v1.0.0
    tagTemplate = 'v${version}'
    //set source file of version property
    versionPropertyFile = 'gradle.properties'
    //set possible properties which may contain the version
    versionProperties = ['version', 'mainversion']
}

//for java plugin
//see https://docs.gradle.org/current/userguide/java_plugin.html
java {
    //package JavaDoc as part of publication
    withJavadocJar()
    //package Sources as part of publication
    withSourcesJar()
}

//for javadoc task
//see https://docs.gradle.org/current/dsl/org.gradle.api.tasks.javadoc.Javadoc.html
javadoc {
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}
//for plugin io.github.gradle-nexus.publish-plugin
//see https://github.com/gradle-nexus/publish-plugin
nexusPublishing {
    repositories {
        //select sonatype repository as publication destination 
        //uses pre-configured URLs, e.g. https://oss.sonatype.org/
        sonatype()
        //for alternate publication desination define nexusUrl and snapshotRepositoryUrl
        //also relevant for users registered in Sonatype after 24 Feb 2021
        //sonatype {
        //    nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
        //    snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
        //}
    }
}

//for plugin maven-publish/io.github.gradle-nexus.publish-plugin
//see https://docs.gradle.org/current/userguide/publishing_maven.html
publishing {
    publications {
        //define publication identity, e.g. maven, which will be used
        //by the signing plugin, e.g. sign publishing.publications.maven
        maven(MavenPublication) {
            //select component to publish, e.g. java including JavaDoc
            //and sources (see above)
            from components.java
            //set elements in generated pom.xml according to requirements
            //by Sonatype (see https://central.sonatype.org/pages/requirements.html)
            pom {
                name = project['name']
                description = project['description']
                url = 'http://datamanager.kit.edu'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'Jejkal'
                        name = 'Thomas Jejkal'
                        email = 'webmaster@datamanager.kit.edu'
                    }
                }
                scm {
                    connection = 'scm:git:github.com/kit-data-manager/nexus-publish-example'
                    developerConnection = 'scm:git:github.com/kit-data-manager/nexus-publish-example'
                    url = 'https://github.com/kit-data-manager/nexus-publish-example'
                }
            }         
        }
    }
}

//for plugin signing
//see https://docs.gradle.org/current/userguide/signing_plugin.html
signing {
    //make signing required unless for SNAPSHOT releases or if signing is explicitly skipped
    required { !project.version.endsWith("-SNAPSHOT") && !project.hasProperty("skipSigning") }
   
    //look for property 'signingKey'
    if (project.findProperty("signingKey")) {
        //If required, read a sub-key specified by its ID in property signingKeyId
        //def signingKeyId = findProperty("signingKeyId")
        //read property 'signingKey'
        def signingKey = findProperty("signingKey")
        //read property 'signingPassword'
        def signingPassword = findProperty("signingPassword")   
        //Select to use in-memory ascii-armored keys
        useInMemoryPgpKeys(signingKey, signingPassword)
        //Only if also using signingKeyId
        //useInMemoryPgpKeys(signingKeyId, signingKey, signingPassword)

        //Apply signing to publication identity 'publishing.publications.maven'
        sign publishing.publications.maven
    }else {
        println 'WARNING: No property \'signingKey\' found. Artifact signing will be skipped.'
    }
}

